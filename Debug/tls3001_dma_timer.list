
tls3001_dma_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e8  080039e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f0  080039f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003a68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003a68  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002244  00000000  00000000  0002d971  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0002fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022279  00000000  00000000  000314b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b53f  00000000  00000000  00053729  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cef71  00000000  00000000  0005ec68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012dbd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  0012dc54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003960 	.word	0x08003960

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08003960 	.word	0x08003960

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f94d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fef4 	bl	8003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f965 	bl	8000836 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f92d 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000009c 	.word	0x2000009c

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000009c 	.word	0x2000009c

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff29 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff3e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800085c:	f7ff feb8 	bl	80005d0 <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e099      	b.n	80009a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2202      	movs	r2, #2
 8000878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f022 0201 	bic.w	r2, r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800088c:	e00f      	b.n	80008ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800088e:	f7ff fe9f 	bl	80005d0 <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b05      	cmp	r3, #5
 800089a:	d908      	bls.n	80008ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2220      	movs	r2, #32
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2203      	movs	r2, #3
 80008a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e078      	b.n	80009a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e8      	bne.n	800088e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <HAL_DMA_Init+0x158>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	2b04      	cmp	r3, #4
 8000906:	d107      	bne.n	8000918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4313      	orrs	r3, r2
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f023 0307 	bic.w	r3, r3, #7
 800092e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	4313      	orrs	r3, r2
 8000938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	2b04      	cmp	r3, #4
 8000940:	d117      	bne.n	8000972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4313      	orrs	r3, r2
 800094a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 facb 	bl	8000ef0 <DMA_CheckFifoParam>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800096e:	2301      	movs	r3, #1
 8000970:	e016      	b.n	80009a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fa82 	bl	8000e84 <DMA_CalcBaseAndBitshift>
 8000980:	4603      	mov	r3, r0
 8000982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000988:	223f      	movs	r2, #63	; 0x3f
 800098a:	409a      	lsls	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	f010803f 	.word	0xf010803f

080009ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d101      	bne.n	80009d2 <HAL_DMA_Start_IT+0x26>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e048      	b.n	8000a64 <HAL_DMA_Start_IT+0xb8>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d137      	bne.n	8000a56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2202      	movs	r2, #2
 80009ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2200      	movs	r2, #0
 80009f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f000 fa14 	bl	8000e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a04:	223f      	movs	r2, #63	; 0x3f
 8000a06:	409a      	lsls	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0216 	orr.w	r2, r2, #22
 8000a1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d007      	beq.n	8000a44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0208 	orr.w	r2, r2, #8
 8000a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 0201 	orr.w	r2, r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e005      	b.n	8000a62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a78:	4b92      	ldr	r3, [pc, #584]	; (8000cc4 <HAL_DMA_IRQHandler+0x258>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_DMA_IRQHandler+0x25c>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0a9b      	lsrs	r3, r3, #10
 8000a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a96:	2208      	movs	r2, #8
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01a      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0204 	bic.w	r2, r2, #4
 8000abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	2201      	movs	r2, #1
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d012      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00b      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afa:	2201      	movs	r2, #1
 8000afc:	409a      	lsls	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b06:	f043 0202 	orr.w	r2, r3, #2
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	2204      	movs	r2, #4
 8000b14:	409a      	lsls	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d012      	beq.n	8000b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	2204      	movs	r2, #4
 8000b32:	409a      	lsls	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b3c:	f043 0204 	orr.w	r2, r3, #4
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b48:	2210      	movs	r2, #16
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d043      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d03c      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b66:	2210      	movs	r2, #16
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d018      	beq.n	8000bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d108      	bne.n	8000b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d024      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4798      	blx	r3
 8000b9a:	e01f      	b.n	8000bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01b      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	4798      	blx	r3
 8000bac:	e016      	b.n	8000bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d107      	bne.n	8000bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0208 	bic.w	r2, r2, #8
 8000bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be0:	2220      	movs	r2, #32
 8000be2:	409a      	lsls	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 808e 	beq.w	8000d0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8086 	beq.w	8000d0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c02:	2220      	movs	r2, #32
 8000c04:	409a      	lsls	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d136      	bne.n	8000c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0216 	bic.w	r2, r2, #22
 8000c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <HAL_DMA_IRQHandler+0x1da>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0208 	bic.w	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5a:	223f      	movs	r2, #63	; 0x3f
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d07d      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	4798      	blx	r3
        }
        return;
 8000c82:	e078      	b.n	8000d76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d01c      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d108      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d030      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	4798      	blx	r3
 8000cb0:	e02b      	b.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d027      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	4798      	blx	r3
 8000cc2:	e022      	b.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10f      	bne.n	8000cfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0210 	bic.w	r2, r2, #16
 8000ce8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d032      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d022      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2205      	movs	r2, #5
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d307      	bcc.n	8000d52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f2      	bne.n	8000d36 <HAL_DMA_IRQHandler+0x2ca>
 8000d50:	e000      	b.n	8000d54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	4798      	blx	r3
 8000d74:	e000      	b.n	8000d78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d76:	bf00      	nop
    }
  }
}
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop

08000d80 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d101      	bne.n	8000da0 <HAL_DMA_RegisterCallback+0x20>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e03c      	b.n	8000e1a <HAL_DMA_RegisterCallback+0x9a>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d129      	bne.n	8000e08 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	2b05      	cmp	r3, #5
 8000db8:	d829      	bhi.n	8000e0e <HAL_DMA_RegisterCallback+0x8e>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <HAL_DMA_RegisterCallback+0x40>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000de1 	.word	0x08000de1
 8000dc8:	08000de9 	.word	0x08000de9
 8000dcc:	08000df1 	.word	0x08000df1
 8000dd0:	08000df9 	.word	0x08000df9
 8000dd4:	08000e01 	.word	0x08000e01
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000dde:	e017      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000de6:	e013      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8000dee:	e00f      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8000df6:	e00b      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8000dfe:	e007      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8000e06:	e003      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	75fb      	strb	r3, [r7, #23]
 8000e0c:	e000      	b.n	8000e10 <HAL_DMA_RegisterCallback+0x90>
      break;
 8000e0e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b40      	cmp	r3, #64	; 0x40
 8000e54:	d108      	bne.n	8000e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e66:	e007      	b.n	8000e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	60da      	str	r2, [r3, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3b10      	subs	r3, #16
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <DMA_CalcBaseAndBitshift+0x68>)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d909      	bls.n	8000ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	1d1a      	adds	r2, r3, #4
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8000ec4:	e007      	b.n	8000ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	aaaaaaab 	.word	0xaaaaaaab
 8000eec:	0800398c 	.word	0x0800398c

08000ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d11f      	bne.n	8000f4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d855      	bhi.n	8000fbc <DMA_CheckFifoParam+0xcc>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <DMA_CheckFifoParam+0x28>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f3b 	.word	0x08000f3b
 8000f20:	08000f29 	.word	0x08000f29
 8000f24:	08000fbd 	.word	0x08000fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d045      	beq.n	8000fc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f38:	e042      	b.n	8000fc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f42:	d13f      	bne.n	8000fc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f48:	e03c      	b.n	8000fc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f52:	d121      	bne.n	8000f98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d836      	bhi.n	8000fc8 <DMA_CheckFifoParam+0xd8>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <DMA_CheckFifoParam+0x70>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f77 	.word	0x08000f77
 8000f68:	08000f71 	.word	0x08000f71
 8000f6c:	08000f89 	.word	0x08000f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
      break;
 8000f74:	e02f      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d024      	beq.n	8000fcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f86:	e021      	b.n	8000fcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f90:	d11e      	bne.n	8000fd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f96:	e01b      	b.n	8000fd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d902      	bls.n	8000fa4 <DMA_CheckFifoParam+0xb4>
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d003      	beq.n	8000faa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000fa2:	e018      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8000fa8:	e015      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00e      	beq.n	8000fd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8000fba:	e00b      	b.n	8000fd4 <DMA_CheckFifoParam+0xe4>
      break;
 8000fbc:	bf00      	nop
 8000fbe:	e00a      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000fc0:	bf00      	nop
 8000fc2:	e008      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000fc4:	bf00      	nop
 8000fc6:	e006      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000fc8:	bf00      	nop
 8000fca:	e004      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000fcc:	bf00      	nop
 8000fce:	e002      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8000fd4:	bf00      	nop
    }
  } 
  
  return status; 
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e165      	b.n	80012cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8154 	bne.w	80012c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x4a>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b12      	cmp	r3, #18
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	69b9      	ldr	r1, [r7, #24]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d00b      	beq.n	80010ca <HAL_GPIO_Init+0xe6>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010be:	2b11      	cmp	r3, #17
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ae 	beq.w	80012c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_GPIO_Init+0x2fc>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a5b      	ldr	r2, [pc, #364]	; (80012e0 <HAL_GPIO_Init+0x2fc>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <HAL_GPIO_Init+0x2fc>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x300>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x304>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x308>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x310>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x20a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x206>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x202>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x21c>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4934      	ldr	r1, [pc, #208]	; (80012e4 <HAL_GPIO_Init+0x300>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_GPIO_Init+0x320>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <HAL_GPIO_Init+0x320>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_GPIO_Init+0x320>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126c:	4a25      	ldr	r2, [pc, #148]	; (8001304 <HAL_GPIO_Init+0x320>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_GPIO_Init+0x320>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x320>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x320>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c0:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_GPIO_Init+0x320>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae96 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	3724      	adds	r7, #36	; 0x24
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40021400 	.word	0x40021400
 8001300:	40021800 	.word	0x40021800
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	401a      	ands	r2, r3
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	429a      	cmp	r2, r3
 8001352:	d104      	bne.n	800135e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	041a      	lsls	r2, r3, #16
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800135c:	e002      	b.n	8001364 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_PWREx_EnableOverDrive+0x90>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_PWREx_EnableOverDrive+0x90>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_PWREx_EnableOverDrive+0x90>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_PWREx_EnableOverDrive+0x94>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139c:	f7ff f918 	bl	80005d0 <HAL_GetTick>
 80013a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013a2:	e009      	b.n	80013b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013a4:	f7ff f914 	bl	80005d0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	d901      	bls.n	80013b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e01f      	b.n	80013f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_PWREx_EnableOverDrive+0x98>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d1ee      	bne.n	80013a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff f900 	bl	80005d0 <HAL_GetTick>
 80013d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013d2:	e009      	b.n	80013e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013d4:	f7ff f8fc 	bl	80005d0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e2:	d901      	bls.n	80013e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e007      	b.n	80013f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_PWREx_EnableOverDrive+0x98>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013f4:	d1ee      	bne.n	80013d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	420e0040 	.word	0x420e0040
 8001408:	40007000 	.word	0x40007000
 800140c:	420e0044 	.word	0x420e0044

08001410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0ca      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d90c      	bls.n	800144c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b64      	ldr	r3, [pc, #400]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b6      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a57      	ldr	r2, [pc, #348]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800146e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147c:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	494c      	ldr	r1, [pc, #304]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d044      	beq.n	8001530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d119      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07d      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d003      	beq.n	80014ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06d      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e065      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff f866 	bl	80005d0 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e00a      	b.n	800151e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff f862 	bl	80005d0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e04d      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 020c 	and.w	r2, r3, #12
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	429a      	cmp	r2, r3
 800152e:	d1eb      	bne.n	8001508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d20c      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e030      	b.n	80015ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4915      	ldr	r1, [pc, #84]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	490d      	ldr	r1, [pc, #52]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001596:	f000 f851 	bl	800163c <HAL_RCC_GetSysClockFreq>
 800159a:	4601      	mov	r1, r0
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	fa21 f303 	lsr.w	r3, r1, r3
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7fe ffc8 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	080039d0 	.word	0x080039d0
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015f4:	4601      	mov	r1, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4a03      	ldr	r2, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	080039e0 	.word	0x080039e0

08001614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001618:	f7ff ffdc 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 800161c:	4601      	mov	r1, r0
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	0b5b      	lsrs	r3, r3, #13
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	080039e0 	.word	0x080039e0

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001656:	4bc6      	ldr	r3, [pc, #792]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b0c      	cmp	r3, #12
 8001660:	f200 817e 	bhi.w	8001960 <HAL_RCC_GetSysClockFreq+0x324>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <HAL_RCC_GetSysClockFreq+0x30>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	080016a1 	.word	0x080016a1
 8001670:	08001961 	.word	0x08001961
 8001674:	08001961 	.word	0x08001961
 8001678:	08001961 	.word	0x08001961
 800167c:	080016a7 	.word	0x080016a7
 8001680:	08001961 	.word	0x08001961
 8001684:	08001961 	.word	0x08001961
 8001688:	08001961 	.word	0x08001961
 800168c:	080016ad 	.word	0x080016ad
 8001690:	08001961 	.word	0x08001961
 8001694:	08001961 	.word	0x08001961
 8001698:	08001961 	.word	0x08001961
 800169c:	08001809 	.word	0x08001809
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a0:	4bb4      	ldr	r3, [pc, #720]	; (8001974 <HAL_RCC_GetSysClockFreq+0x338>)
 80016a2:	613b      	str	r3, [r7, #16]
       break;
 80016a4:	e15f      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a6:	4bb4      	ldr	r3, [pc, #720]	; (8001978 <HAL_RCC_GetSysClockFreq+0x33c>)
 80016a8:	613b      	str	r3, [r7, #16]
      break;
 80016aa:	e15c      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b6:	4bae      	ldr	r3, [pc, #696]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d04a      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c2:	4bab      	ldr	r3, [pc, #684]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	f04f 0400 	mov.w	r4, #0
 80016cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	ea03 0501 	and.w	r5, r3, r1
 80016d8:	ea04 0602 	and.w	r6, r4, r2
 80016dc:	4629      	mov	r1, r5
 80016de:	4632      	mov	r2, r6
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	f04f 0400 	mov.w	r4, #0
 80016e8:	0154      	lsls	r4, r2, #5
 80016ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016ee:	014b      	lsls	r3, r1, #5
 80016f0:	4619      	mov	r1, r3
 80016f2:	4622      	mov	r2, r4
 80016f4:	1b49      	subs	r1, r1, r5
 80016f6:	eb62 0206 	sbc.w	r2, r2, r6
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	f04f 0400 	mov.w	r4, #0
 8001702:	0194      	lsls	r4, r2, #6
 8001704:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001708:	018b      	lsls	r3, r1, #6
 800170a:	1a5b      	subs	r3, r3, r1
 800170c:	eb64 0402 	sbc.w	r4, r4, r2
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	00e2      	lsls	r2, r4, #3
 800171a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800171e:	00d9      	lsls	r1, r3, #3
 8001720:	460b      	mov	r3, r1
 8001722:	4614      	mov	r4, r2
 8001724:	195b      	adds	r3, r3, r5
 8001726:	eb44 0406 	adc.w	r4, r4, r6
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	0262      	lsls	r2, r4, #9
 8001734:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001738:	0259      	lsls	r1, r3, #9
 800173a:	460b      	mov	r3, r1
 800173c:	4614      	mov	r4, r2
 800173e:	4618      	mov	r0, r3
 8001740:	4621      	mov	r1, r4
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f04f 0400 	mov.w	r4, #0
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	f7fe fd5a 	bl	8000204 <__aeabi_uldivmod>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e049      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001758:	4b85      	ldr	r3, [pc, #532]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	f04f 0400 	mov.w	r4, #0
 8001762:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	ea03 0501 	and.w	r5, r3, r1
 800176e:	ea04 0602 	and.w	r6, r4, r2
 8001772:	4629      	mov	r1, r5
 8001774:	4632      	mov	r2, r6
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	f04f 0400 	mov.w	r4, #0
 800177e:	0154      	lsls	r4, r2, #5
 8001780:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001784:	014b      	lsls	r3, r1, #5
 8001786:	4619      	mov	r1, r3
 8001788:	4622      	mov	r2, r4
 800178a:	1b49      	subs	r1, r1, r5
 800178c:	eb62 0206 	sbc.w	r2, r2, r6
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f04f 0400 	mov.w	r4, #0
 8001798:	0194      	lsls	r4, r2, #6
 800179a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800179e:	018b      	lsls	r3, r1, #6
 80017a0:	1a5b      	subs	r3, r3, r1
 80017a2:	eb64 0402 	sbc.w	r4, r4, r2
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	00e2      	lsls	r2, r4, #3
 80017b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017b4:	00d9      	lsls	r1, r3, #3
 80017b6:	460b      	mov	r3, r1
 80017b8:	4614      	mov	r4, r2
 80017ba:	195b      	adds	r3, r3, r5
 80017bc:	eb44 0406 	adc.w	r4, r4, r6
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	02a2      	lsls	r2, r4, #10
 80017ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017ce:	0299      	lsls	r1, r3, #10
 80017d0:	460b      	mov	r3, r1
 80017d2:	4614      	mov	r4, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f04f 0400 	mov.w	r4, #0
 80017de:	461a      	mov	r2, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	f7fe fd0f 	bl	8000204 <__aeabi_uldivmod>
 80017e6:	4603      	mov	r3, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ec:	4b60      	ldr	r3, [pc, #384]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	613b      	str	r3, [r7, #16]
      break;
 8001806:	e0ae      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001810:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d04a      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b54      	ldr	r3, [pc, #336]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	f04f 0400 	mov.w	r4, #0
 8001828:	f240 11ff 	movw	r1, #511	; 0x1ff
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	ea03 0501 	and.w	r5, r3, r1
 8001834:	ea04 0602 	and.w	r6, r4, r2
 8001838:	4629      	mov	r1, r5
 800183a:	4632      	mov	r2, r6
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	0154      	lsls	r4, r2, #5
 8001846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800184a:	014b      	lsls	r3, r1, #5
 800184c:	4619      	mov	r1, r3
 800184e:	4622      	mov	r2, r4
 8001850:	1b49      	subs	r1, r1, r5
 8001852:	eb62 0206 	sbc.w	r2, r2, r6
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	f04f 0400 	mov.w	r4, #0
 800185e:	0194      	lsls	r4, r2, #6
 8001860:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001864:	018b      	lsls	r3, r1, #6
 8001866:	1a5b      	subs	r3, r3, r1
 8001868:	eb64 0402 	sbc.w	r4, r4, r2
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	00e2      	lsls	r2, r4, #3
 8001876:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800187a:	00d9      	lsls	r1, r3, #3
 800187c:	460b      	mov	r3, r1
 800187e:	4614      	mov	r4, r2
 8001880:	195b      	adds	r3, r3, r5
 8001882:	eb44 0406 	adc.w	r4, r4, r6
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	0262      	lsls	r2, r4, #9
 8001890:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001894:	0259      	lsls	r1, r3, #9
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f04f 0400 	mov.w	r4, #0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	f7fe fcac 	bl	8000204 <__aeabi_uldivmod>
 80018ac:	4603      	mov	r3, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e049      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	f04f 0400 	mov.w	r4, #0
 80018be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	ea03 0501 	and.w	r5, r3, r1
 80018ca:	ea04 0602 	and.w	r6, r4, r2
 80018ce:	4629      	mov	r1, r5
 80018d0:	4632      	mov	r2, r6
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f04f 0400 	mov.w	r4, #0
 80018da:	0154      	lsls	r4, r2, #5
 80018dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e0:	014b      	lsls	r3, r1, #5
 80018e2:	4619      	mov	r1, r3
 80018e4:	4622      	mov	r2, r4
 80018e6:	1b49      	subs	r1, r1, r5
 80018e8:	eb62 0206 	sbc.w	r2, r2, r6
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	f04f 0400 	mov.w	r4, #0
 80018f4:	0194      	lsls	r4, r2, #6
 80018f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018fa:	018b      	lsls	r3, r1, #6
 80018fc:	1a5b      	subs	r3, r3, r1
 80018fe:	eb64 0402 	sbc.w	r4, r4, r2
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	00e2      	lsls	r2, r4, #3
 800190c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001910:	00d9      	lsls	r1, r3, #3
 8001912:	460b      	mov	r3, r1
 8001914:	4614      	mov	r4, r2
 8001916:	195b      	adds	r3, r3, r5
 8001918:	eb44 0406 	adc.w	r4, r4, r6
 800191c:	f04f 0100 	mov.w	r1, #0
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	02a2      	lsls	r2, r4, #10
 8001926:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800192a:	0299      	lsls	r1, r3, #10
 800192c:	460b      	mov	r3, r1
 800192e:	4614      	mov	r4, r2
 8001930:	4618      	mov	r0, r3
 8001932:	4621      	mov	r1, r4
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f04f 0400 	mov.w	r4, #0
 800193a:	461a      	mov	r2, r3
 800193c:	4623      	mov	r3, r4
 800193e:	f7fe fc61 	bl	8000204 <__aeabi_uldivmod>
 8001942:	4603      	mov	r3, r0
 8001944:	460c      	mov	r4, r1
 8001946:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_GetSysClockFreq+0x334>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	0f1b      	lsrs	r3, r3, #28
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	613b      	str	r3, [r7, #16]
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_RCC_GetSysClockFreq+0x338>)
 8001962:	613b      	str	r3, [r7, #16]
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	693b      	ldr	r3, [r7, #16]
}
 8001968:	4618      	mov	r0, r3
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8083 	beq.w	8001a9c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001996:	4b95      	ldr	r3, [pc, #596]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d019      	beq.n	80019d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a2:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019ae:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ba:	d00c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019bc:	4b8b      	ldr	r3, [pc, #556]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d112      	bne.n	80019ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d4:	d10b      	bne.n	80019ee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d6:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d05b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x11e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d157      	bne.n	8001a9a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e216      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x8a>
 80019f8:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a7b      	ldr	r2, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e01d      	b.n	8001a42 <HAL_RCC_OscConfig+0xc6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0xae>
 8001a10:	4b76      	ldr	r3, [pc, #472]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a75      	ldr	r2, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a72      	ldr	r2, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0xc6>
 8001a2a:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6f      	ldr	r2, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6c      	ldr	r2, [pc, #432]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d013      	beq.n	8001a72 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7fe fdc1 	bl	80005d0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7fe fdbd 	bl	80005d0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1db      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0xd6>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7fe fdad 	bl	80005d0 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7a:	f7fe fda9 	bl	80005d0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1c7      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8c:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0xfe>
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d06f      	beq.n	8001b88 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d11c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d116      	bne.n	8001b12 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x180>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e18f      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4938      	ldr	r1, [pc, #224]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b10:	e03a      	b.n	8001b88 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d020      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7fe fd56 	bl	80005d0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7fe fd52 	bl	80005d0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e170      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4925      	ldr	r1, [pc, #148]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7fe fd35 	bl	80005d0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7fe fd31 	bl	80005d0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e14f      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d037      	beq.n	8001c04 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d016      	beq.n	8001bca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7fe fd15 	bl	80005d0 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001baa:	f7fe fd11 	bl	80005d0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e12f      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x22e>
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7fe fcfe 	bl	80005d0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fcfa 	bl	80005d0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e118      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	42470000 	.word	0x42470000
 8001bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b8a      	ldr	r3, [pc, #552]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e9      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8097 	beq.w	8001d40 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b7f      	ldr	r3, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a7e      	ldr	r2, [pc, #504]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a75      	ldr	r2, [pc, #468]	; (8001e28 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7fe fcb9 	bl	80005d0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7fe fcb5 	bl	80005d0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0d3      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x31a>
 8001c88:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a65      	ldr	r2, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
 8001c94:	e01c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x354>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x33c>
 8001c9e:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a60      	ldr	r2, [pc, #384]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a5d      	ldr	r2, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x354>
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a59      	ldr	r2, [pc, #356]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d015      	beq.n	8001d04 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7fe fc7a 	bl	80005d0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe fc76 	bl	80005d0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e092      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ee      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x364>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7fe fc64 	bl	80005d0 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7fe fc60 	bl	80005d0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e07c      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ee      	bne.n	8001d0c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a3a      	ldr	r2, [pc, #232]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d068      	beq.n	8001e1a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d060      	beq.n	8001e16 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d145      	bne.n	8001de8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x4b0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7fe fc35 	bl	80005d0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe fc31 	bl	80005d0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e04f      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	019b      	lsls	r3, r3, #6
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	071b      	lsls	r3, r3, #28
 8001db4:	491b      	ldr	r1, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_OscConfig+0x4b0>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fc06 	bl	80005d0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe fc02 	bl	80005d0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e020      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x44c>
 8001de6:	e018      	b.n	8001e1a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x4b0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7fe fbef 	bl	80005d0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fbeb 	bl	80005d0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_OscConfig+0x4a8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x47a>
 8001e14:	e001      	b.n	8001e1a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42470060 	.word	0x42470060

08001e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e01d      	b.n	8001e7e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f001 fb88 	bl	800356c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f000 fad4 	bl	800241c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fd0e 	bl	80028bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_TIM_PWM_Stop+0xa8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_TIM_PWM_Stop+0x2c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_TIM_PWM_Stop+0xac>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIM_PWM_Stop+0x30>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_TIM_PWM_Stop+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d017      	beq.n	8001eee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_TIM_PWM_Stop+0x66>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	f240 4344 	movw	r3, #1092	; 0x444
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <HAL_TIM_PWM_Stop+0x66>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_TIM_PWM_Stop+0x96>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	f240 4344 	movw	r3, #1092	; 0x444
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <HAL_TIM_PWM_Stop+0x96>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40010400 	.word	0x40010400

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9e5 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f9d7 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f001 f925 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f9bb 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f9ad 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f001 f8fb 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f991 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f983 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 f8d1 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f967 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f959 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 f8a7 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0201 	mvn.w	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f933 	bl	8002322 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fc5e 	bl	80029a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f925 	bl	800235e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fc28 	bl	8002990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800215e:	2302      	movs	r3, #2
 8002160:	e0b4      	b.n	80022cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	f200 809f 	bhi.w	80022b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080022b9 	.word	0x080022b9
 8002188:	080022b9 	.word	0x080022b9
 800218c:	080022b9 	.word	0x080022b9
 8002190:	080021f5 	.word	0x080021f5
 8002194:	080022b9 	.word	0x080022b9
 8002198:	080022b9 	.word	0x080022b9
 800219c:	080022b9 	.word	0x080022b9
 80021a0:	08002237 	.word	0x08002237
 80021a4:	080022b9 	.word	0x080022b9
 80021a8:	080022b9 	.word	0x080022b9
 80021ac:	080022b9 	.word	0x080022b9
 80021b0:	08002277 	.word	0x08002277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f9ce 	bl	800255c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6999      	ldr	r1, [r3, #24]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	619a      	str	r2, [r3, #24]
      break;
 80021f2:	e062      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fa1e 	bl	800263c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	619a      	str	r2, [r3, #24]
      break;
 8002234:	e041      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fa73 	bl	8002728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0208 	orr.w	r2, r2, #8
 8002250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0204 	bic.w	r2, r2, #4
 8002260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
      break;
 8002274:	e021      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fac7 	bl	8002810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	61da      	str	r2, [r3, #28]
      break;
 80022b6:	e000      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80022b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_GenerateEvent+0x18>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e014      	b.n	8002316 <HAL_TIM_GenerateEvent+0x42>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7ff ffe8 	bl	8002372 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d103      	bne.n	80023d2 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	771a      	strb	r2, [r3, #28]
 80023d0:	e019      	b.n	8002406 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2202      	movs	r2, #2
 80023e0:	771a      	strb	r2, [r3, #28]
 80023e2:	e010      	b.n	8002406 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d103      	bne.n	80023f6 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2204      	movs	r2, #4
 80023f2:	771a      	strb	r2, [r3, #28]
 80023f4:	e007      	b.n	8002406 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d102      	bne.n	8002406 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2208      	movs	r2, #8
 8002404:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fee6 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	771a      	strb	r2, [r3, #28]
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <TIM_Base_SetConfig+0x114>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d00f      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3d      	ldr	r2, [pc, #244]	; (8002534 <TIM_Base_SetConfig+0x118>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00b      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <TIM_Base_SetConfig+0x11c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3b      	ldr	r2, [pc, #236]	; (800253c <TIM_Base_SetConfig+0x120>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3a      	ldr	r2, [pc, #232]	; (8002540 <TIM_Base_SetConfig+0x124>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <TIM_Base_SetConfig+0x114>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02b      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d027      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <TIM_Base_SetConfig+0x118>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d023      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <TIM_Base_SetConfig+0x11c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01f      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a2a      	ldr	r2, [pc, #168]	; (800253c <TIM_Base_SetConfig+0x120>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01b      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <TIM_Base_SetConfig+0x124>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d017      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a28      	ldr	r2, [pc, #160]	; (8002544 <TIM_Base_SetConfig+0x128>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <TIM_Base_SetConfig+0x12c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00f      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <TIM_Base_SetConfig+0x130>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <TIM_Base_SetConfig+0x134>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a24      	ldr	r2, [pc, #144]	; (8002554 <TIM_Base_SetConfig+0x138>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <TIM_Base_SetConfig+0x13c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d108      	bne.n	80024e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <TIM_Base_SetConfig+0x114>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0xf8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <TIM_Base_SetConfig+0x124>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d103      	bne.n	800251c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	615a      	str	r2, [r3, #20]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40010000 	.word	0x40010000
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800
 800253c:	40000c00 	.word	0x40000c00
 8002540:	40010400 	.word	0x40010400
 8002544:	40014000 	.word	0x40014000
 8002548:	40014400 	.word	0x40014400
 800254c:	40014800 	.word	0x40014800
 8002550:	40001800 	.word	0x40001800
 8002554:	40001c00 	.word	0x40001c00
 8002558:	40002000 	.word	0x40002000

0800255c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f023 0201 	bic.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a20      	ldr	r2, [pc, #128]	; (8002634 <TIM_OC1_SetConfig+0xd8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <TIM_OC1_SetConfig+0x64>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <TIM_OC1_SetConfig+0xdc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10c      	bne.n	80025da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0308 	bic.w	r3, r3, #8
 80025c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a15      	ldr	r2, [pc, #84]	; (8002634 <TIM_OC1_SetConfig+0xd8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_OC1_SetConfig+0x8e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <TIM_OC1_SetConfig+0xdc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	621a      	str	r2, [r3, #32]
}
 8002628:	bf00      	nop
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40010000 	.word	0x40010000
 8002638:	40010400 	.word	0x40010400

0800263c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f023 0210 	bic.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0320 	bic.w	r3, r3, #32
 8002686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <TIM_OC2_SetConfig+0xe4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_OC2_SetConfig+0x68>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <TIM_OC2_SetConfig+0xe8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10d      	bne.n	80026c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <TIM_OC2_SetConfig+0xe4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <TIM_OC2_SetConfig+0x94>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <TIM_OC2_SetConfig+0xe8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d113      	bne.n	80026f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	621a      	str	r2, [r3, #32]
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40010000 	.word	0x40010000
 8002724:	40010400 	.word	0x40010400

08002728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <TIM_OC3_SetConfig+0xe0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_OC3_SetConfig+0x66>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <TIM_OC3_SetConfig+0xe4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10d      	bne.n	80027aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a16      	ldr	r2, [pc, #88]	; (8002808 <TIM_OC3_SetConfig+0xe0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <TIM_OC3_SetConfig+0x92>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a15      	ldr	r2, [pc, #84]	; (800280c <TIM_OC3_SetConfig+0xe4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d113      	bne.n	80027e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40010000 	.word	0x40010000
 800280c:	40010400 	.word	0x40010400

08002810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800285a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	031b      	lsls	r3, r3, #12
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <TIM_OC4_SetConfig+0xa4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <TIM_OC4_SetConfig+0x68>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <TIM_OC4_SetConfig+0xa8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d109      	bne.n	800288c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	621a      	str	r2, [r3, #32]
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010400 	.word	0x40010400

080028bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2201      	movs	r2, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291a:	2302      	movs	r3, #2
 800291c:	e032      	b.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002956:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e03f      	b.n	8002a4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fe98 	bl	8003714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f829 	bl	8002a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a94:	f023 030c 	bic.w	r3, r3, #12
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	f040 80e4 	bne.w	8002c8c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4aab      	ldr	r2, [pc, #684]	; (8002d78 <UART_SetConfig+0x324>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <UART_SetConfig+0x84>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4aaa      	ldr	r2, [pc, #680]	; (8002d7c <UART_SetConfig+0x328>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d16c      	bne.n	8002bb2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ad8:	f7fe fd9c 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4aa3      	ldr	r2, [pc, #652]	; (8002d80 <UART_SetConfig+0x32c>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	011c      	lsls	r4, r3, #4
 8002afc:	f7fe fd8a 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009a      	lsls	r2, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b16:	f7fe fd7d 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	4a93      	ldr	r2, [pc, #588]	; (8002d80 <UART_SetConfig+0x32c>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2264      	movs	r2, #100	; 0x64
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	1aeb      	subs	r3, r5, r3
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	3332      	adds	r3, #50	; 0x32
 8002b44:	4a8e      	ldr	r2, [pc, #568]	; (8002d80 <UART_SetConfig+0x32c>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b52:	441c      	add	r4, r3
 8002b54:	f7fe fd5e 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009a      	lsls	r2, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b6e:	f7fe fd51 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	4a7d      	ldr	r2, [pc, #500]	; (8002d80 <UART_SetConfig+0x32c>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2264      	movs	r2, #100	; 0x64
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	1aeb      	subs	r3, r5, r3
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	3332      	adds	r3, #50	; 0x32
 8002b9c:	4a78      	ldr	r2, [pc, #480]	; (8002d80 <UART_SetConfig+0x32c>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 0207 	and.w	r2, r3, #7
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4422      	add	r2, r4
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e154      	b.n	8002e5c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bb2:	f7fe fd1b 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009a      	lsls	r2, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	4a6c      	ldr	r2, [pc, #432]	; (8002d80 <UART_SetConfig+0x32c>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	011c      	lsls	r4, r3, #4
 8002bd6:	f7fe fd09 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bf0:	f7fe fcfc 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	441a      	add	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4a5d      	ldr	r2, [pc, #372]	; (8002d80 <UART_SetConfig+0x32c>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	2264      	movs	r2, #100	; 0x64
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	1aeb      	subs	r3, r5, r3
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	3332      	adds	r3, #50	; 0x32
 8002c1e:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <UART_SetConfig+0x32c>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c2c:	441c      	add	r4, r3
 8002c2e:	f7fe fcdd 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c48:	f7fe fcd0 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009a      	lsls	r2, r3, #2
 8002c56:	441a      	add	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	4a47      	ldr	r2, [pc, #284]	; (8002d80 <UART_SetConfig+0x32c>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	1aeb      	subs	r3, r5, r3
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	3332      	adds	r3, #50	; 0x32
 8002c76:	4a42      	ldr	r2, [pc, #264]	; (8002d80 <UART_SetConfig+0x32c>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	f003 0207 	and.w	r2, r3, #7
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4422      	add	r2, r4
 8002c88:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002c8a:	e0e7      	b.n	8002e5c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a39      	ldr	r2, [pc, #228]	; (8002d78 <UART_SetConfig+0x324>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <UART_SetConfig+0x24c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <UART_SetConfig+0x328>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d171      	bne.n	8002d84 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ca0:	f7fe fcb8 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	441a      	add	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4a31      	ldr	r2, [pc, #196]	; (8002d80 <UART_SetConfig+0x32c>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	011c      	lsls	r4, r3, #4
 8002cc4:	f7fe fca6 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009a      	lsls	r2, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cde:	f7fe fc99 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <UART_SetConfig+0x32c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	1aeb      	subs	r3, r5, r3
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <UART_SetConfig+0x32c>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d18:	441c      	add	r4, r3
 8002d1a:	f7fe fc7b 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d34:	f7fe fc6e 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009a      	lsls	r2, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <UART_SetConfig+0x32c>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2264      	movs	r2, #100	; 0x64
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	1aeb      	subs	r3, r5, r3
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <UART_SetConfig+0x32c>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4422      	add	r2, r4
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	e071      	b.n	8002e5c <UART_SetConfig+0x408>
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d84:	f7fe fc32 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	441a      	add	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <UART_SetConfig+0x410>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	011c      	lsls	r4, r3, #4
 8002da8:	f7fe fc20 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	441a      	add	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dc2:	f7fe fc13 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <UART_SetConfig+0x410>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2264      	movs	r2, #100	; 0x64
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	1aeb      	subs	r3, r5, r3
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	3332      	adds	r3, #50	; 0x32
 8002df0:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <UART_SetConfig+0x410>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfc:	441c      	add	r4, r3
 8002dfe:	f7fe fbf5 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e18:	f7fe fbe8 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009a      	lsls	r2, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <UART_SetConfig+0x410>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	2264      	movs	r2, #100	; 0x64
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	1aeb      	subs	r3, r5, r3
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	3332      	adds	r3, #50	; 0x32
 8002e46:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <UART_SetConfig+0x410>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4422      	add	r2, r4
 8002e58:	609a      	str	r2, [r3, #8]
}
 8002e5a:	e7ff      	b.n	8002e5c <UART_SetConfig+0x408>
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdb0      	pop	{r4, r5, r7, pc}
 8002e64:	51eb851f 	.word	0x51eb851f

08002e68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_DMA_Init+0x3c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <MX_DMA_Init+0x3c>)
 8002e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_DMA_Init+0x3c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f7fd fca7 	bl	80007e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002e94:	200f      	movs	r0, #15
 8002e96:	f7fd fcc0 	bl	800081a <HAL_NVIC_EnableIRQ>

}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_GPIO_Init+0xd0>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2120      	movs	r1, #32
 8002f32:	4812      	ldr	r0, [pc, #72]	; (8002f7c <MX_GPIO_Init+0xd4>)
 8002f34:	f7fe f9e8 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <MX_GPIO_Init+0xd8>)
 8002f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480d      	ldr	r0, [pc, #52]	; (8002f84 <MX_GPIO_Init+0xdc>)
 8002f4e:	f7fe f849 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f52:	2320      	movs	r3, #32
 8002f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	f107 0314 	add.w	r3, r7, #20
 8002f66:	4619      	mov	r1, r3
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <MX_GPIO_Init+0xd4>)
 8002f6a:	f7fe f83b 	bl	8000fe4 <HAL_GPIO_Init>

}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	10110000 	.word	0x10110000
 8002f84:	40020800 	.word	0x40020800

08002f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const uint32_t data_in_len = 10;
 8002f8e:	230a      	movs	r3, #10
 8002f90:	61fb      	str	r3, [r7, #28]
	uint16_t data_in_buffer [10] = {1, 1, 0, 0, 1, 1, 1, 0, 0, 0};
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <main+0xd8>)
 8002f94:	1d3c      	adds	r4, r7, #4
 8002f96:	461d      	mov	r5, r3
 8002f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	6023      	str	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa0:	f7fd fab0 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fa4:	f000 f86e 	bl	8003084 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  uint32_t PCLK1_freq=HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7fe fb20 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002fac:	61b8      	str	r0, [r7, #24]
  uwTimerPeriod = (uint32_t)(((PCLK1_freq*2) / TLS3001_CLK) - 1);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <main+0xdc>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0c5b      	lsrs	r3, r3, #17
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <main+0xe0>)
 8002fbe:	6013      	str	r3, [r2, #0]
  /* Compute CCR2 value to generate a duty cycle at 50% */
  aCCValue = (uint32_t)(((uint32_t) 50 * (uwTimerPeriod - 1)) / 100);
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <main+0xe0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2232      	movs	r2, #50	; 0x32
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	3b32      	subs	r3, #50	; 0x32
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <main+0xe4>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <main+0xe8>)
 8002fd6:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd8:	f7ff ff66 	bl	8002ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fdc:	f7ff ff44 	bl	8002e68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002fe0:	f000 fb6e 	bl	80036c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002fe4:	f000 fa6a 	bl	80034bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Send reset
  user_init_DMA_buffer(&OCxM_DMA_buffer, &data_in_buffer[0], data_in_len);
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4821      	ldr	r0, [pc, #132]	; (8003074 <main+0xec>)
 8002ff0:	f000 f91c 	bl	800322c <user_init_DMA_buffer>
  TLS3001_send_packet(OCxM_DMA_buffer, &htim3.Instance->CCMR1, data_in_len);
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <main+0xec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <main+0xf0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3318      	adds	r3, #24
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	4619      	mov	r1, r3
 8003004:	f000 f8b2 	bl	800316c <TLS3001_send_packet>

  while(TLS3001_PWM_transfer_finish == false){
 8003008:	bf00      	nop
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <main+0xf4>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f7      	bne.n	800300a <main+0x82>
  }

  HAL_Delay(1);	//1ms delay.
 800301a:	2001      	movs	r0, #1
 800301c:	f7fd fae4 	bl	80005e8 <HAL_Delay>

  // Send Synch
  user_init_DMA_buffer(&OCxM_DMA_buffer, &TLS3001_SYNC[0], TLS3001_SYNC_LEN);
 8003020:	221e      	movs	r2, #30
 8003022:	4917      	ldr	r1, [pc, #92]	; (8003080 <main+0xf8>)
 8003024:	4813      	ldr	r0, [pc, #76]	; (8003074 <main+0xec>)
 8003026:	f000 f901 	bl	800322c <user_init_DMA_buffer>
  TLS3001_send_packet(OCxM_DMA_buffer, &htim3.Instance->CCMR1, TLS3001_SYNC_LEN);
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <main+0xec>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <main+0xf0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3318      	adds	r3, #24
 8003036:	221e      	movs	r2, #30
 8003038:	4619      	mov	r1, r3
 800303a:	f000 f897 	bl	800316c <TLS3001_send_packet>

  while(TLS3001_PWM_transfer_finish == false){
 800303e:	bf00      	nop
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <main+0xf4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f083 0301 	eor.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f7      	bne.n	8003040 <main+0xb8>
  }

  HAL_Delay(50);	//50ms delay.
 8003050:	2032      	movs	r0, #50	; 0x32
 8003052:	f7fd fac9 	bl	80005e8 <HAL_Delay>
		//TIM3->CCMR1 &= temp;
		  TLS3001_PWM_transfer_finish = false;
	  }
	  */

	  HAL_Delay(10);
 8003056:	200a      	movs	r0, #10
 8003058:	f7fd fac6 	bl	80005e8 <HAL_Delay>
 800305c:	e7fb      	b.n	8003056 <main+0xce>
 800305e:	bf00      	nop
 8003060:	08003978 	.word	0x08003978
 8003064:	431bde83 	.word	0x431bde83
 8003068:	200000a4 	.word	0x200000a4
 800306c:	51eb851f 	.word	0x51eb851f
 8003070:	200000a8 	.word	0x200000a8
 8003074:	200000a0 	.word	0x200000a0
 8003078:	200000ac 	.word	0x200000ac
 800307c:	2000008c 	.word	0x2000008c
 8003080:	08003994 	.word	0x08003994

08003084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b094      	sub	sp, #80	; 0x50
 8003088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	2234      	movs	r2, #52	; 0x34
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fbe2 	bl	800385c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <SystemClock_Config+0xe0>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <SystemClock_Config+0xe0>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6413      	str	r3, [r2, #64]	; 0x40
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <SystemClock_Config+0xe0>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <SystemClock_Config+0xe4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <SystemClock_Config+0xe4>)
 80030ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <SystemClock_Config+0xe4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ea:	2302      	movs	r3, #2
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030f4:	2308      	movs	r3, #8
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80030f8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030fe:	2302      	movs	r3, #2
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003102:	2302      	movs	r3, #2
 8003104:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003106:	2302      	movs	r3, #2
 8003108:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800310a:	f107 031c 	add.w	r3, r7, #28
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fc34 	bl	800197c <HAL_RCC_OscConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800311a:	f000 f8fb 	bl	8003314 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800311e:	f7fe f927 	bl	8001370 <HAL_PWREx_EnableOverDrive>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003128:	f000 f8f4 	bl	8003314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800312c:	230f      	movs	r3, #15
 800312e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003130:	2302      	movs	r3, #2
 8003132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800313c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003142:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003144:	f107 0308 	add.w	r3, r7, #8
 8003148:	2105      	movs	r1, #5
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe f960 	bl	8001410 <HAL_RCC_ClockConfig>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003156:	f000 f8dd 	bl	8003314 <Error_Handler>
  }
}
 800315a:	bf00      	nop
 800315c:	3750      	adds	r7, #80	; 0x50
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000

0800316c <TLS3001_send_packet>:

/* USER CODE BEGIN 4 */


void TLS3001_send_packet(uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
	  // Enable the DMA stream
	  if (HAL_DMA_Start_IT(&hdma_tim3_ch1_trig, SrcAddress, DstAddress, DataLength) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	4812      	ldr	r0, [pc, #72]	; (80031c8 <TLS3001_send_packet+0x5c>)
 8003180:	f7fd fc14 	bl	80009ac <HAL_DMA_Start_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11a      	bne.n	80031c0 <TLS3001_send_packet+0x54>
	  {
		 return HAL_ERROR;
	  }
	  // Enable the TIM3 Update event DMA request
	  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <TLS3001_send_packet+0x60>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <TLS3001_send_packet+0x60>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	60da      	str	r2, [r3, #12]
	  HAL_TIM_GenerateEvent(&htim3, TIM_EGR_CC1G);
 800319a:	2102      	movs	r1, #2
 800319c:	480b      	ldr	r0, [pc, #44]	; (80031cc <TLS3001_send_packet+0x60>)
 800319e:	f7ff f899 	bl	80022d4 <HAL_TIM_GenerateEvent>

	  HAL_Delay(10);
 80031a2:	200a      	movs	r0, #10
 80031a4:	f7fd fa20 	bl	80005e8 <HAL_Delay>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80031a8:	2120      	movs	r1, #32
 80031aa:	4809      	ldr	r0, [pc, #36]	; (80031d0 <TLS3001_send_packet+0x64>)
 80031ac:	f7fe f8c5 	bl	800133a <HAL_GPIO_TogglePin>
	  user_PWM_start(&htim3, TIM_CHANNEL_1);
 80031b0:	2100      	movs	r1, #0
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <TLS3001_send_packet+0x60>)
 80031b4:	f000 f880 	bl	80032b8 <user_PWM_start>

	  TLS3001_PWM_transfer_finish = false;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <TLS3001_send_packet+0x68>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e000      	b.n	80031c2 <TLS3001_send_packet+0x56>
		 return HAL_ERROR;
 80031c0:	bf00      	nop
}
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	200000ec 	.word	0x200000ec
 80031cc:	200000ac 	.word	0x200000ac
 80031d0:	40020000 	.word	0x40020000
 80031d4:	2000008c 	.word	0x2000008c

080031d8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	//


	//Alternative to above
	//Wait for the period to finish prior to disabling the
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80031e0:	2120      	movs	r1, #32
 80031e2:	480f      	ldr	r0, [pc, #60]	; (8003220 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80031e4:	f7fe f8a9 	bl	800133a <HAL_GPIO_TogglePin>
	while(TIM3->CNT < TIM3->ARR){
 80031e8:	bf00      	nop
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80031ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3f9      	bcc.n	80031ea <HAL_TIM_PWM_PulseFinishedCallback+0x12>
	}

	uint16_t temp = (~TIM_CCMR1_OC1M_Msk | TIM_OCMODE_FORCED_INACTIVE);
 80031f6:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 80031fa:	81fb      	strh	r3, [r7, #14]
	TIM3->CCMR1 &= temp;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8003204:	4013      	ands	r3, r2
 8003206:	618b      	str	r3, [r1, #24]
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8003208:	2100      	movs	r1, #0
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fe3c 	bl	8001e88 <HAL_TIM_PWM_Stop>

	TLS3001_PWM_transfer_finish = true;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]


}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40020000 	.word	0x40020000
 8003224:	40000400 	.word	0x40000400
 8003228:	2000008c 	.word	0x2000008c

0800322c <user_init_DMA_buffer>:


void user_init_DMA_buffer(uint32_t **DMA_buffer, uint16_t *data_in_buffer, uint32_t data_len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	  uint32_t tim_3_ccmr1_manch_0 = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
	  uint32_t tim_3_ccmr1_manch_1 = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

	  *DMA_buffer = (uint32_t *)calloc(data_len, sizeof(uint32_t));
 8003240:	2104      	movs	r1, #4
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fad8 	bl	80037f8 <calloc>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

	  /* Get the TIMx CCMR2 register value */
	  uint16_t tmpccmr1 = TIM3->CCMR1;
 8003250:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <user_init_DMA_buffer+0x88>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	827b      	strh	r3, [r7, #18]
	  tim_3_ccmr1_manch_1 = (tmpccmr1 | TIM_OCMODE_PWM1);
 8003256:	8a7b      	ldrh	r3, [r7, #18]
 8003258:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800325c:	b29b      	uxth	r3, r3
 800325e:	617b      	str	r3, [r7, #20]
	  tim_3_ccmr1_manch_0 = (tmpccmr1 | TIM_OCMODE_PWM2);
 8003260:	8a7b      	ldrh	r3, [r7, #18]
 8003262:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003266:	b29b      	uxth	r3, r3
 8003268:	61bb      	str	r3, [r7, #24]

	  for (int i = 0; i < data_len; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e018      	b.n	80032a2 <user_init_DMA_buffer+0x76>
	  {
		  if(*(data_in_buffer+i) == 1)		//Manchester '1'
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	4413      	add	r3, r2
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <user_init_DMA_buffer+0x62>
		  {
			  *(*DMA_buffer+i) = tim_3_ccmr1_manch_1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e006      	b.n	800329c <user_init_DMA_buffer+0x70>
		  }
		  else								//Manchester '0'
		  {
			  *(*DMA_buffer+i) = tim_3_ccmr1_manch_0;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < data_len; i++)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d8e2      	bhi.n	8003270 <user_init_DMA_buffer+0x44>
		  }

	  }
}
 80032aa:	bf00      	nop
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40000400 	.word	0x40000400

080032b8 <user_PWM_start>:

// Function for faster start of PWM (had some delay issues with first pulse)
void user_PWM_start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
	  /* Enable the Capture compare channel */
	  uint32_t tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2201      	movs	r2, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	60fb      	str	r3, [r7, #12]
	  /* Reset the CCxE Bit */
	  TIM3->CCER &= ~tmp;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <user_PWM_start+0x58>)
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	490d      	ldr	r1, [pc, #52]	; (8003310 <user_PWM_start+0x58>)
 80032da:	4013      	ands	r3, r2
 80032dc:	620b      	str	r3, [r1, #32]
	  /* Set or reset the CCxE Bit */
	  TIM3->CCER |= (uint32_t)(TIM_CCx_ENABLE << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <user_PWM_start+0x58>)
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	; (8003310 <user_PWM_start+0x58>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	620b      	str	r3, [r1, #32]

	  __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40000400 	.word	0x40000400

08003314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_MspInit+0x4c>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <HAL_MspInit+0x4c>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	6453      	str	r3, [r2, #68]	; 0x44
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_MspInit+0x4c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_MspInit+0x4c>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003362:	2007      	movs	r0, #7
 8003364:	f7fd fa32 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800

08003374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003386:	e7fe      	b.n	8003386 <HardFault_Handler+0x4>

08003388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800338c:	e7fe      	b.n	800338c <MemManage_Handler+0x4>

0800338e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <BusFault_Handler+0x4>

08003394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <UsageFault_Handler+0x4>

0800339a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c8:	f7fd f8ee 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <DMA1_Stream4_IRQHandler+0x10>)
 80033d6:	f7fd fb49 	bl	8000a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200000ec 	.word	0x200000ec

080033e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM3_IRQHandler+0x10>)
 80033ea:	f7fe fda5 	bl	8001f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200000ac 	.word	0x200000ac

080033f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <_sbrk+0x50>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <_sbrk+0x16>
		heap_end = &end;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <_sbrk+0x50>)
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <_sbrk+0x54>)
 800340c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <_sbrk+0x50>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <_sbrk+0x50>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	466a      	mov	r2, sp
 800341e:	4293      	cmp	r3, r2
 8003420:	d907      	bls.n	8003432 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003422:	f000 f9f1 	bl	8003808 <__errno>
 8003426:	4602      	mov	r2, r0
 8003428:	230c      	movs	r3, #12
 800342a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	e006      	b.n	8003440 <_sbrk+0x48>
	}

	heap_end += incr;
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <_sbrk+0x50>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	4a03      	ldr	r2, [pc, #12]	; (8003448 <_sbrk+0x50>)
 800343c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000090 	.word	0x20000090
 800344c:	20000190 	.word	0x20000190

08003450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <SystemInit+0x60>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <SystemInit+0x60>)
 800345c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <SystemInit+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <SystemInit+0x64>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003470:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <SystemInit+0x64>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <SystemInit+0x64>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <SystemInit+0x64>)
 800347c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <SystemInit+0x64>)
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <SystemInit+0x68>)
 800348a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <SystemInit+0x64>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <SystemInit+0x64>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003496:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <SystemInit+0x64>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SystemInit+0x60>)
 80034a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034a4:	609a      	str	r2, [r3, #8]
#endif
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00
 80034b4:	40023800 	.word	0x40023800
 80034b8:	24003010 	.word	0x24003010

080034bc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c2:	f107 0320 	add.w	r3, r7, #32
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	60da      	str	r2, [r3, #12]
 80034d8:	611a      	str	r2, [r3, #16]
 80034da:	615a      	str	r2, [r3, #20]
 80034dc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80034de:	4b21      	ldr	r3, [pc, #132]	; (8003564 <MX_TIM3_Init+0xa8>)
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <MX_TIM3_Init+0xac>)
 80034e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034e4:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <MX_TIM3_Init+0xa8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ea:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <MX_TIM3_Init+0xa8>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 179;
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <MX_TIM3_Init+0xa8>)
 80034f2:	22b3      	movs	r2, #179	; 0xb3
 80034f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <MX_TIM3_Init+0xa8>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <MX_TIM3_Init+0xa8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003502:	4818      	ldr	r0, [pc, #96]	; (8003564 <MX_TIM3_Init+0xa8>)
 8003504:	f7fe fc94 	bl	8001e30 <HAL_TIM_PWM_Init>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800350e:	f7ff ff01 	bl	8003314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800351a:	f107 0320 	add.w	r3, r7, #32
 800351e:	4619      	mov	r1, r3
 8003520:	4810      	ldr	r0, [pc, #64]	; (8003564 <MX_TIM3_Init+0xa8>)
 8003522:	f7ff f9f0 	bl	8002906 <HAL_TIMEx_MasterConfigSynchronization>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800352c:	f7ff fef2 	bl	8003314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003530:	2360      	movs	r3, #96	; 0x60
 8003532:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 89;
 8003534:	2359      	movs	r3, #89	; 0x59
 8003536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800353c:	2304      	movs	r3, #4
 800353e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	2200      	movs	r2, #0
 8003544:	4619      	mov	r1, r3
 8003546:	4807      	ldr	r0, [pc, #28]	; (8003564 <MX_TIM3_Init+0xa8>)
 8003548:	f7fe fdfe 	bl	8002148 <HAL_TIM_PWM_ConfigChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003552:	f7ff fedf 	bl	8003314 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <MX_TIM3_Init+0xa8>)
 8003558:	f000 f878 	bl	800364c <HAL_TIM_MspPostInit>

}
 800355c:	bf00      	nop
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200000ac 	.word	0x200000ac
 8003568:	40000400 	.word	0x40000400

0800356c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_TIM_PWM_MspInit+0xc8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d156      	bne.n	800362c <HAL_TIM_PWM_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_TIM_PWM_MspInit+0xcc>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <HAL_TIM_PWM_MspInit+0xcc>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_TIM_PWM_MspInit+0xcc>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_TIM_PWM_MspInit+0xd4>)
 800359e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80035a6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ae:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ba:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035c2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ca:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035d8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80035e0:	4816      	ldr	r0, [pc, #88]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035e2:	f7fd f935 	bl	8000850 <HAL_DMA_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80035ec:	f7ff fe92 	bl	8003314 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0f      	ldr	r2, [pc, #60]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
 8003602:	4a0e      	ldr	r2, [pc, #56]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	201d      	movs	r0, #29
 800360e:	f7fd f8e8 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003612:	201d      	movs	r0, #29
 8003614:	f7fd f901 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */
    HAL_DMA_RegisterCallback(&hdma_tim3_ch1_trig, HAL_DMA_XFER_CPLT_CB_ID,TIM_DMADelayPulseCplt);
 8003618:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <HAL_TIM_PWM_MspInit+0xd8>)
 800361a:	2100      	movs	r1, #0
 800361c:	4807      	ldr	r0, [pc, #28]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 800361e:	f7fd fbaf 	bl	8000d80 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim3_ch1_trig, HAL_DMA_XFER_ERROR_CB_ID,TIM_DMAError);
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_TIM_PWM_MspInit+0xdc>)
 8003624:	2104      	movs	r1, #4
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <HAL_TIM_PWM_MspInit+0xd0>)
 8003628:	f7fd fbaa 	bl	8000d80 <HAL_DMA_RegisterCallback>
  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40000400 	.word	0x40000400
 8003638:	40023800 	.word	0x40023800
 800363c:	200000ec 	.word	0x200000ec
 8003640:	40026070 	.word	0x40026070
 8003644:	080023ab 	.word	0x080023ab
 8003648:	08002387 	.word	0x08002387

0800364c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <HAL_TIM_MspPostInit+0x68>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d11d      	bne.n	80036aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_TIM_MspPostInit+0x6c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <HAL_TIM_MspPostInit+0x6c>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_TIM_MspPostInit+0x6c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800368a:	2310      	movs	r3, #16
 800368c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003692:	2302      	movs	r3, #2
 8003694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003696:	2302      	movs	r3, #2
 8003698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800369a:	2302      	movs	r3, #2
 800369c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	4619      	mov	r1, r3
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <HAL_TIM_MspPostInit+0x70>)
 80036a6:	f7fd fc9d 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036aa:	bf00      	nop
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020400 	.word	0x40020400

080036c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <MX_USART2_UART_Init+0x50>)
 80036c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036e6:	220c      	movs	r2, #12
 80036e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <MX_USART2_UART_Init+0x4c>)
 80036f8:	f7ff f95e 	bl	80029b8 <HAL_UART_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003702:	f7ff fe07 	bl	8003314 <Error_Handler>
  }

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000014c 	.word	0x2000014c
 8003710:	40004400 	.word	0x40004400

08003714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_UART_MspInit+0x84>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d12b      	bne.n	800378e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_UART_MspInit+0x88>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_UART_MspInit+0x88>)
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_UART_MspInit+0x88>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_UART_MspInit+0x88>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <HAL_UART_MspInit+0x88>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_UART_MspInit+0x88>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800376e:	230c      	movs	r3, #12
 8003770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003776:	2301      	movs	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377a:	2303      	movs	r3, #3
 800377c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800377e:	2307      	movs	r3, #7
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4619      	mov	r1, r3
 8003788:	4805      	ldr	r0, [pc, #20]	; (80037a0 <HAL_UART_MspInit+0x8c>)
 800378a:	f7fd fc2b 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800378e:	bf00      	nop
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40004400 	.word	0x40004400
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020000 	.word	0x40020000

080037a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037aa:	e003      	b.n	80037b4 <LoopCopyDataInit>

080037ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037b2:	3104      	adds	r1, #4

080037b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037b4:	480b      	ldr	r0, [pc, #44]	; (80037e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037bc:	d3f6      	bcc.n	80037ac <CopyDataInit>
  ldr  r2, =_sbss
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037c0:	e002      	b.n	80037c8 <LoopFillZerobss>

080037c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037c4:	f842 3b04 	str.w	r3, [r2], #4

080037c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037cc:	d3f9      	bcc.n	80037c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037ce:	f7ff fe3f 	bl	8003450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037d2:	f000 f81f 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d6:	f7ff fbd7 	bl	8002f88 <main>
  bx  lr    
 80037da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037e0:	080039f8 	.word	0x080039f8
  ldr  r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037e8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80037ec:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80037f0:	20000190 	.word	0x20000190

080037f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f4:	e7fe      	b.n	80037f4 <ADC_IRQHandler>
	...

080037f8 <calloc>:
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <calloc+0xc>)
 80037fa:	460a      	mov	r2, r1
 80037fc:	4601      	mov	r1, r0
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	f000 b834 	b.w	800386c <_calloc_r>
 8003804:	2000000c 	.word	0x2000000c

08003808 <__errno>:
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <__errno+0x8>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000000c 	.word	0x2000000c

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4e0d      	ldr	r6, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1ba4      	subs	r4, r4, r6
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2500      	movs	r5, #0
 8003820:	42a5      	cmp	r5, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4e0b      	ldr	r6, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 f89a 	bl	8003960 <_init>
 800382c:	1ba4      	subs	r4, r4, r6
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2500      	movs	r5, #0
 8003832:	42a5      	cmp	r5, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383c:	4798      	blx	r3
 800383e:	3501      	adds	r5, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003846:	4798      	blx	r3
 8003848:	3501      	adds	r5, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	080039f0 	.word	0x080039f0
 8003850:	080039f0 	.word	0x080039f0
 8003854:	080039f0 	.word	0x080039f0
 8003858:	080039f4 	.word	0x080039f4

0800385c <memset>:
 800385c:	4402      	add	r2, r0
 800385e:	4603      	mov	r3, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	d100      	bne.n	8003866 <memset+0xa>
 8003864:	4770      	bx	lr
 8003866:	f803 1b01 	strb.w	r1, [r3], #1
 800386a:	e7f9      	b.n	8003860 <memset+0x4>

0800386c <_calloc_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	fb02 f401 	mul.w	r4, r2, r1
 8003872:	4621      	mov	r1, r4
 8003874:	f000 f808 	bl	8003888 <_malloc_r>
 8003878:	4605      	mov	r5, r0
 800387a:	b118      	cbz	r0, 8003884 <_calloc_r+0x18>
 800387c:	4622      	mov	r2, r4
 800387e:	2100      	movs	r1, #0
 8003880:	f7ff ffec 	bl	800385c <memset>
 8003884:	4628      	mov	r0, r5
 8003886:	bd38      	pop	{r3, r4, r5, pc}

08003888 <_malloc_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	1ccd      	adds	r5, r1, #3
 800388c:	f025 0503 	bic.w	r5, r5, #3
 8003890:	3508      	adds	r5, #8
 8003892:	2d0c      	cmp	r5, #12
 8003894:	bf38      	it	cc
 8003896:	250c      	movcc	r5, #12
 8003898:	2d00      	cmp	r5, #0
 800389a:	4606      	mov	r6, r0
 800389c:	db01      	blt.n	80038a2 <_malloc_r+0x1a>
 800389e:	42a9      	cmp	r1, r5
 80038a0:	d903      	bls.n	80038aa <_malloc_r+0x22>
 80038a2:	230c      	movs	r3, #12
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	f000 f857 	bl	800395c <__malloc_lock>
 80038ae:	4a21      	ldr	r2, [pc, #132]	; (8003934 <_malloc_r+0xac>)
 80038b0:	6814      	ldr	r4, [r2, #0]
 80038b2:	4621      	mov	r1, r4
 80038b4:	b991      	cbnz	r1, 80038dc <_malloc_r+0x54>
 80038b6:	4c20      	ldr	r4, [pc, #128]	; (8003938 <_malloc_r+0xb0>)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	b91b      	cbnz	r3, 80038c4 <_malloc_r+0x3c>
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f83d 	bl	800393c <_sbrk_r>
 80038c2:	6020      	str	r0, [r4, #0]
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f838 	bl	800393c <_sbrk_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d124      	bne.n	800391a <_malloc_r+0x92>
 80038d0:	230c      	movs	r3, #12
 80038d2:	6033      	str	r3, [r6, #0]
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 f842 	bl	800395e <__malloc_unlock>
 80038da:	e7e4      	b.n	80038a6 <_malloc_r+0x1e>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	1b5b      	subs	r3, r3, r5
 80038e0:	d418      	bmi.n	8003914 <_malloc_r+0x8c>
 80038e2:	2b0b      	cmp	r3, #11
 80038e4:	d90f      	bls.n	8003906 <_malloc_r+0x7e>
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	50cd      	str	r5, [r1, r3]
 80038ea:	18cc      	adds	r4, r1, r3
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f836 	bl	800395e <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac3      	subs	r3, r0, r3
 80038fe:	d0d3      	beq.n	80038a8 <_malloc_r+0x20>
 8003900:	425a      	negs	r2, r3
 8003902:	50e2      	str	r2, [r4, r3]
 8003904:	e7d0      	b.n	80038a8 <_malloc_r+0x20>
 8003906:	428c      	cmp	r4, r1
 8003908:	684b      	ldr	r3, [r1, #4]
 800390a:	bf16      	itet	ne
 800390c:	6063      	strne	r3, [r4, #4]
 800390e:	6013      	streq	r3, [r2, #0]
 8003910:	460c      	movne	r4, r1
 8003912:	e7eb      	b.n	80038ec <_malloc_r+0x64>
 8003914:	460c      	mov	r4, r1
 8003916:	6849      	ldr	r1, [r1, #4]
 8003918:	e7cc      	b.n	80038b4 <_malloc_r+0x2c>
 800391a:	1cc4      	adds	r4, r0, #3
 800391c:	f024 0403 	bic.w	r4, r4, #3
 8003920:	42a0      	cmp	r0, r4
 8003922:	d005      	beq.n	8003930 <_malloc_r+0xa8>
 8003924:	1a21      	subs	r1, r4, r0
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f808 	bl	800393c <_sbrk_r>
 800392c:	3001      	adds	r0, #1
 800392e:	d0cf      	beq.n	80038d0 <_malloc_r+0x48>
 8003930:	6025      	str	r5, [r4, #0]
 8003932:	e7db      	b.n	80038ec <_malloc_r+0x64>
 8003934:	20000094 	.word	0x20000094
 8003938:	20000098 	.word	0x20000098

0800393c <_sbrk_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4c06      	ldr	r4, [pc, #24]	; (8003958 <_sbrk_r+0x1c>)
 8003940:	2300      	movs	r3, #0
 8003942:	4605      	mov	r5, r0
 8003944:	4608      	mov	r0, r1
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	f7ff fd56 	bl	80033f8 <_sbrk>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d102      	bne.n	8003956 <_sbrk_r+0x1a>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	b103      	cbz	r3, 8003956 <_sbrk_r+0x1a>
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	2000018c 	.word	0x2000018c

0800395c <__malloc_lock>:
 800395c:	4770      	bx	lr

0800395e <__malloc_unlock>:
 800395e:	4770      	bx	lr

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
